!title Simple LDSC pipeline

#change this to your install
#checkout via 'svn co https://svn/lap'
lap_home=/home/unix/flannick/lap

#run with
#perl $lap_home/trunk/bin/run.pl --meta /path/to/meta/file

#web UI at
#https://intranet.broadinstitute.org/~flannick/lap/
#type in full path of meta file

#====================
#CLASSES

#These are the levels at which files will be created and commands will be run
#You load instances for each class in the companion meta file
#A file assigned to the class will be created for each instance in the class
#A command assisnged to the class will run once per instance
#Classes are a tree structure, so ancestors have parents and descendents
#Each instance has properties, which by default are its instance name, ancestor instance names, and descendent instance names (accessible via @'class')

class project=Project
class chrom=Chromosome parent project
class trait=Trait parent project
class cts=CTS parent trait
class gene_set=Gene Set parent project
class gene_set_chrom=Gene Set Chrom parent gene_set consistent chrom
class ldsc_trait=LDSC Trait parent gene_set consistent trait


#CLASSES
#====================

#====================
#DIRECTORIES

#syntax is (prefix1) (prefix2) ... (prefixN) key=value (postfix1=value1) (postfix2=value2) ... (postfixN=valueN)
#can access value via $key
#unix_out_dir is special key defined in accompanying meta file
sortable mkdir path projects_dir=$unix_out_dir/projects
#class_level (class) postfix indicates to create a directory for each instance in this class
#sortable prefix means can sort files within this directory via the Web UI
#mkdir prefix means make this directory when you initialize the project
#path prefix means this is a UNIX path
sortable mkdir path project_dir=$projects_dir/@project class_level project
sortable mkdir path chroms_dir=$project_dir/chroms class_level project
sortable mkdir path chrom_dir=$chroms_dir/@chrom class_level chrom
sortable mkdir path traits_dir=$project_dir/traits class_level project
sortable mkdir path trait_dir=$traits_dir/@trait class_level trait
sortable mkdir path ctss_dir=$trait_dir/ctss class_level trait
sortable mkdir path cts_dir=$ctss_dir/@cts class_level cts
sortable mkdir path gene_sets_dir=$project_dir/gene_sets class_level project
sortable mkdir path gene_set_dir=$gene_sets_dir/@gene_set class_level gene_set
sortable mkdir path gene_set_chroms_dir=$gene_set_dir/gene_set_chroms class_level gene_set
sortable mkdir path gene_set_chrom_dir=$gene_set_chroms_dir/@gene_set_chrom class_level gene_set_chrom
sortable mkdir path ldsc_traits_dir=$gene_set_dir/ldsc_traits class_level gene_set
sortable mkdir path ldsc_trait_dir=$ldsc_traits_dir/@ldsc_trait class_level ldsc_trait

#DIRECTORIES
#====================


#====================
#CATEGORIES

#cat prefix indicates a category to display on the web UI
#you will assign files to categories to dictate their display
#categories can be hierarchical (via parent)
#class_level indicates which page they will be displayed on (there is one page for each class level)
#disp postfix is the header to show
cat cat_project_data=null disp "Project files" class_level project
cat cat_chrom_data=null disp "Chrom files" class_level chrom
cat cat_trait_data=null disp "Trait files" class_level trait
cat cat_cts_data=null disp "CTS files" class_level cts
cat cat_gene_set_data=null disp "Gene Set files" class_level gene_set
cat cat_gene_set_chrom_data=null disp "Gene Set Chrom files" class_level gene_set_chrom
cat cat_ldsc_trait_data=null disp "LDSC Trait files" class_level ldsc_trait

#CATEGORIES
#====================

#====================
#UTILS

#these are some useful commands you may want to use
lap_trunk=$lap_home/trunk
lap_projects=$lap_home/projects
common_bin_dir=$lap_projects/common
ldsc_bin_dir=$lap_projects/ldsc/bin

#config files can be included
#common.cfg is required
!include $lap_trunk/config/common.cfg


#these are some useful scripts I wrote to process files
#this runs R-3.4
conditional_exec_cmd=perl $common_bin_dir/conditional_exec.pl
#join multiple files or commands
smart_join_cmd=perl $common_bin_dir/smart_join.pl
#concatenate / cut files or commands
smart_cut_cmd=perl $common_bin_dir/smart_cut.pl
bin_values_cmd=perl $common_bin_dir/bin_values.pl
#this can add a new column that's a function of other columns (add, divide, log, abs, etc.)
add_function_cmd=perl $common_bin_dir/add_function.pl
add_header_cmd=perl $common_bin_dir/add_header.pl
#transpose a file
transpose_cmd=perl $common_bin_dir/transpose.pl
#generate a nice pdf from the file
table_to_beamer_cmd=perl $common_bin_dir/table_to_beamer.pl
text_to_beamer_cmd=perl $common_bin_dir/text_to_beamer.pl
#pretty print columns (e.g. %.3g)
format_columns_cmd=perl $common_bin_dir/format_columns.pl
vcf_utils_cmd=perl $targeted_bin_dir/vcf_utils.pl
table_sum_stats_cmd=perl $common_bin_dir/table_sum_stats.pl

draw_qq_plot_cmd=Rscript $common_bin_dir/draw_qq_plot.R

#cmd_class prefix tells it to match on value of the key and then execute the postfixes
#postfix use_mod says run "use" when this command is run
#so just using "Rscript" in commands below will automatically load R-3.4
cmd_class rscript_cmd_class=Rscript use_mod R-3.4
cmd_class tabix_cmd_class=tabix use_mod Tabix
cmd_class plink_cmd_class=plink use_mod PLINK2

ldsc_home=/humgen/diabetes2/users/lthakur/LDSC/ldsc
ldsc_install_dir=/humgen/diabetes2/users/lthakur/lap_test/ldsc/bin/ldsc

python_for_ldsc=source activate ldsc && python

map_gene_set_file=$python_for_ldsc /humgen/diabetes2/users/lthakur/lap_test/ldsc/bin/map_gene_set.py
munge_sumstats_cmd=$python_for_ldsc $ldsc_home/munge_sumstats.py
make_annot_cmd=$python_for_ldsc $ldsc_bin_dir/make_annot.new.py
ldsc_cmd=$python_for_ldsc $ldsc_install_dir/ldsc.py

#UTILS
#====================

#====================
#PARAMETERS

#miscellaneous variables can be defined here

#PARAMETERS
#====================

#====================
#CONSTANTS


#CONSTANTS
#====================


#====================
#FILES

#define one file for each input/output you want to use in commands
#dir postfix says where it will live; must be a key
#disp postfix says what to title it on the web UI
#parent postfix says which category to show it in on the web UI
#class_level says to create the file for each instance in the class
#file prefix is required to identify this key as a file
#the key is the name of the file (you'll use this to define it as a command input/output)
#the value is the value of the file on disk; you need to use properties to make sure each instance has a unique value

#Files generated once per project

meta_table path file project_traits_meta_file=@project.traits.meta dir project_dir disp ".traits.meta" parent cat_project_data class_level project meta_level trait

path file project_hm3_snplist_file=@project.hm3.snplist dir project_dir disp ".hm3.snplist" parent cat_project_data class_level project

path file project_gene_coord_file=@project.gene.coord.txt dir project_dir disp ".coord.txt" parent cat_project_data class_level project

path file project_gene_map_file=@project.gene.map.txt dir project_dir disp ".map.txt" parent cat_project_data class_level project

project_frq_trunk=@project dir project_dir
path file project_frq_file=@project.frq dir project_dir disp ".frq" parent cat_project_data class_level project

project_w_l2_ldscore_gz_trunk=@project dir project_dir
path file project_w_l2_ldscore_gz_file=@project.l2.ldscore.gz dir project_dir disp ".l2.ldscore.gz" parent cat_project_data class_level project

path file project_results_annot_file=@project.results.annot dir project_dir disp ".results.annot" parent cat_project_data class_level project

#path file project_all_genes_gene_list_file=@project.all_genes.list dir project_dir disp ".list" parent cat_project_data class_level project

#Files generated once per chromosome

chrom_trunk=@chrom dir chrom_dir

path file chrom_bim_file=@chrom.bim dir chrom_dir disp ".bim" parent cat_chrom_data class_level chrom
path file chrom_fam_file=@chrom.fam dir chrom_dir disp ".fam" parent cat_chrom_data class_level chrom
path file chrom_bed_file=@chrom.bed dir chrom_dir disp ".bed" parent cat_chrom_data class_level chrom

path file chrom_frq_file=@chrom.frq dir chrom_dir disp ".frq" parent cat_chrom_data class_level chrom

path file chrom_w_l2_ldscore_gz_file=@chrom.l2.ldscore.gz dir chrom_dir disp ".l2.ldscore.gz" parent cat_chrom_data class_level chrom

path file chrom_baseline_bed_file=@chrom.baseline.bed dir chrom_dir disp ".baseline.bed" parent cat_chrom_data class_level chrom

path file chrom_baseline_annot_gz_file=@chrom.baseline.annot.gz dir chrom_dir disp ".baseline.annot.gz" parent cat_chrom_data class_level chrom

chrom_baseline_trunk=@chrom.baseline dir chrom_dir

path file chrom_baseline_l2_ldscore_gz_file=@chrom.baseline.l2.ldscore.gz dir chrom_dir disp ".baseline.l2.ldscore.gz" parent cat_chrom_data class_level chrom

path file chrom_baseline_l2_m_5_50_file=@chrom.baseline.l2.M_5_50 dir chrom_dir disp ".baseline.l2.M_5_50" parent cat_chrom_data class_level chrom

#path file chrom_all_genes_gene_set_file=@chrom.all_genes.txt dir chrom_dir disp ".txt" parent cat_chrom_data class_level chrom

#path file chrom_all_genes_annot_file=@chrom.all_genes.annot.gz dir chrom_dir disp ".all_genes.annot.gz" parent cat_chrom_data class_level chrom

#chrom_all_genes_trunk=@chrom.all_genes dir chrom_dir

#path file chrom_all_genes_l2_ldscore_gz_file=@chrom.all_genes.l2.ldscore.gz dir chrom_dir disp ".all_genes.l2.ldscore.gz" parent cat_chrom_data class_level chrom

#path file chrom_all_genes_l2_m_5_50_file=@chrom.all_genes.l2.M_5_50 dir chrom_dir disp ".all_genes.l2.M_5_50" parent cat_chrom_data class_level chrom


path file chrom_snps_file=@chrom.snp dir chrom_dir disp ".snps" parent cat_chrom_data class_level chrom


#Files generated once per trait

trait_munged_sumstats_trunk=@trait.munged dir trait_dir

path file trait_initial_sumstats_file=@trait.initial.sumstats.gz dir trait_dir disp ".initial.sumtats" parent cat_trait_data class_level trait

path file trait_munged_sumstats_file=@trait.munged.sumstats.gz dir trait_dir disp ".munged.sumtats" parent cat_trait_data class_level trait

path cts_trunk=@cts dir cts_dir

path file cts_results_file=@cts.cell_type_results.txt dir cts_dir disp ".cell_type_results.txt" parent cat_cts_data class_level cts

path file cts_parsed_results_file=@cts.cell_type_results.parsed.txt dir cts_dir disp ".cell_type_results.parsed.txt" parent cat_cts_data class_level cts

path file project_parsed_results_file=@project.cell_type_results.parsed.txt dir project_dir disp ".cell_type_results.parsed.txt" parent cat_project_data class_level project

path file cts_log_file=@cts.log dir cts_dir disp ".log" parent cat_cts_data class_level cts

#Files generated once per gene set

path file gene_set_gene_set_list_file=@gene_set.list dir gene_set_dir disp ".list" parent cat_gene_set_data class_level gene_set

path file gene_set_gene_set_file=@gene_set.txt dir gene_set_dir disp ".txt" parent cat_gene_set_data class_level gene_set

#Files generated once per gene set/chrom

path file gene_set_chrom_initial_annot_file=@gene_set_chrom.initial.annot.gz dir gene_set_chrom_dir disp ".initial.annot.gz" parent cat_gene_set_chrom_data class_level gene_set_chrom

#path file gene_set_chrom_annot_file=@gene_set_chrom.annot.gz dir gene_set_chrom_dir disp ".annot.gz" parent cat_gene_set_chrom_data class_level gene_set_chrom


gene_set_chrom_initial_trunk=@gene_set_chrom.initial dir gene_set_chrom_dir
path file gene_set_chrom_initial_l2_ldscore_gz_file=@gene_set_chrom.initial.l2.ldscore.gz dir gene_set_chrom_dir disp ".initial.l2.ldscore.gz" parent cat_gene_set_chrom_data class_level gene_set_chrom
path file gene_set_chrom_initial_l2_m_5_50_file=@gene_set_chrom.initial.l2.M_5_50 dir gene_set_chrom_dir disp ".initial.l2.M_5_50" parent cat_gene_set_chrom_data class_level gene_set_chrom

#path file gene_set_chrom_l2_ldscore_gz_file=@gene_set_chrom.l2.ldscore.gz dir gene_set_chrom_dir disp ".l2.ldscore.gz" parent cat_gene_set_chrom_data class_level gene_set_chrom
#path file gene_set_chrom_l2_m_5_50_file=@gene_set_chrom.l2.M_5_50 dir gene_set_chrom_dir disp ".l2.M_5_50" parent cat_gene_set_chrom_data class_level gene_set_chrom


#Files generated once per gene_set

#path file gene_set_initial_annot_file=@gene_set.initial.annot.gz dir gene_set_dir disp ".initial.annot.gz" parent cat_gene_set_data class_level gene_set

#path file gene_set_annot_file=@gene_set.annot.gz dir gene_set_dir disp ".annot.gz" parent cat_gene_set_data class_level gene_set

gene_set_l2_ldscore_gz_trunk=@gene_set dir gene_set_dir
path file gene_set_l2_ldscore_gz_file=@gene_set.l2.ldscore.gz dir gene_set_dir disp ".l2.ldscore.gz" parent cat_gene_set_data class_level gene_set

path file gene_set_l2_m_5_50_file=@gene_set.l2.M_5_50 dir gene_set_dir disp ".l2.M_5_50" parent cat_gene_set_data class_level gene_set

path file gene_set_results_annot_file=@gene_set.results.annot dir gene_set_dir disp ".results.annot" parent cat_gene_set_data class_level gene_set

#Files generated once per ldsc_trait

ldsc_trait_trunk=@ldsc_trait dir ldsc_trait_dir

path file ldsc_trait_log_file=@ldsc_trait.log dir ldsc_trait_dir disp ".log" parent cat_ldsc_trait_data class_level ldsc_trait

path file ldsc_trait_results_file=@ldsc_trait.results dir ldsc_trait_dir disp ".results" parent cat_ldsc_trait_data class_level ldsc_trait

path file ldsc_trait_results_annot_file=@ldsc_trait.results.annot dir ldsc_trait_dir disp ".results.annot" parent cat_ldsc_trait_data class_level ldsc_trait

#FILES
#====================


#====================
#COMMANDS

#define commands via the cmd prefix
#prefix short says run on cluster with 2:00 default run time with flag --bsub; can also do local (never run on cluster, useful for very short commands) and long (default to 8:00 run time)
#if jobs run out of time or memory on the cluster, they will be auto-restarted with double the time (or memory)
#postfix class_level says run this for every tissue instance. It will expand all !{} objects based on the specific instance it is running for
#the key is the name of the command (you can use this to control what is run on the command line)
#the value is the text to be run
#!{type:flag?:class_level?:key:prop1=value1:prop2=value2...:propN=valueN} expands and is how you control inputs/outputs/instance specific behavior
#you do not need to use a : as a separator; any character will work
#!{input::file_key} says expand this to a file name (or set of files if the file_key is at a descendent class), treat it as an input (run this command whenever that input is newer than the outputs). Use !{input:-flag:file_key} if you want to put a -flag in front of every expansion. file_key can have any class_level you want; it will expand as many times as necessary based on the instance tree
#!{output;;file_key} says expand this to a file name(s), treat it as an output (run if output is missing or older than an input). Note the use of ; here rather than : since delimiters are arbitrary

prop dbi_configuration=scalar
prop dynamic_cts=list
prop dynamic_ref_ld_chr_cts=list
prop ref_ld_chr=scalar
prop ref_ld_chr_cts=scalar

prop ancestry=scalar
prop internal_dataset=scalar
prop nsamples=scalar
prop ncases=scalar
prop dataset=scalar
prop skip_dataset=list

local cmd make_project_traits_meta_file=perl $lap_projects/ldsc/bin/lap_traits.pl --dbi-configuration !{prop::project:dbi_configuration} --ancestry !{prop::project:ancestry} !{prop:--no-dataset:project:skip_dataset} | awk '!m[\$2] {print; m[\$2]=1}' | $smart_cut_cmd --tab-delim --exec "(echo !{prop::project:dynamic_cts} && echo !{prop::project:dynamic_ref_ld_chr_cts}) | perl $common_bin_dir/transpose.pl --in-delim $'\t' | sed 's/^/DYN\t/'" | awk -F"\t" '\$1 == "DYN" {m[\$2]=\$3; print \$2,"class","cts"; print \$2,"ref_ld_chr_cts",\$3} \$1 != "DYN" {print \$2,"class","trait"; print \$2,"dataset",\$1; print \$2,"trait_index",\$2; print \$2,"parent","!{prop::project}"; print \$2,"internal_dataset",\$3; print \$2,"nsamples",\$5; if (\$4 > 0) {print \$2,"ncases",\$4} ldsc_name="ldsc_"\$2; print ldsc_name,"class","ldsc_trait"; print ldsc_name,"trait_index",\$2; print ldsc_name,"consistent",\$2; print ldsc_name,"parent","gene_set"; for (key in m) {print key,"parent",\$2} }' > !{output::project_traits_meta_file} class_level project run_if dbi_configuration

#the !{raw::trait:*trait_munged_sumstats_trunk} syntax will generate $trait_dir/$trait_munged_sumstats_trunk (since trait_munged_sumstats_trunk had dir trait_dir assigned to it)
#!{output:trait_munged_sumstats_file} will expand to the empty string but tell the pipeline that this file is produced as an output

cmd make_trait_initial_sumstats_file=$use(MySQL-5.6); $use(.perl-5.28.0); perl $lap_projects/ldsc/bin/get_significant_associations.pl --dbi-configuration !{prop::project:dbi_configuration} --dataset !{prop::trait:dataset} --phenotype !{prop::trait} --dataset-id !{prop::trait:internal_dataset} --min-pvalue 1 | sed '1 s/$/\tN\tINFO/' | sed '1! s/$/\t!{prop::trait:nsamples}\t1/' | cat !{prop::chrom:chrom_bim_file} - | awk -v OFS="\t" 'BEGIN {header=0} NF == 6 {m[\$1":"\$4]=\$2} NF != 6 && (!header || m[\$2":"\$3]) {header=1; if (m[\$2":"\$3]) {\$1=m[\$2":"\$3]} else {\$1="SNP"} print}' | sed '1 s/Chr/CHR/' | sed 's/Pos/POS/' | sed 's/Effect/A1/' | sed 's/Ref/A2/' | perl $common_bin_dir/add_function.pl --in-delim $'\t' --col1 P --type zscore --header 1  --val-header Z | perl $common_bin_dir/add_function.pl --in-delim $'\t' --col1 Beta --col2 Z --type divide --val-header se_signed --header 1  | perl $common_bin_dir/add_function.pl --in-delim $'\t' --col1 se_signed --type abs --val-header se --add-at P --header 1  | rev | cut -f3- | rev | bgzip > !{output::trait_initial_sumstats_file} class_level trait run_if dbi_configuration

short cmd make_trait_munged_sumstats_file=$munge_sumstats_cmd \
			--sumstats !{input::trait_initial_sumstats_file} \
			--merge-alleles !{input::project_hm3_snplist_file} \
			--out !{raw::trait:*trait_munged_sumstats_trunk} !{output:trait_munged_sumstats_file} \
			--a1-inc \
			class_level trait

#you can define additional properties to assign to instances in the meta file
#access these via !{prop}
#the third entry is the class level to access the property at
#if a fourth entry is specified, that property value is used; otherwise 
#you can use the missing_prop modifier to use a different property if the first one is missing
prop window_size=scalar default 100000
#disp is a special property

prop chrom_num=scalar

short cmd make_gene_set_gene_set_file=cat !{input::project_gene_map_file} !{input::gene_set_gene_set_list_file} | awk -F"\t" 'NF == 2 {m[\$2]=\$1} NF == 1 && m[\$1] {print m[\$1]}' > !{output::gene_set_gene_set_file} class_level gene_set

#$map_gene_set_file --gene-list-file !{input::gene_set_gene_set_list_file} --genecode-out-file !{output::gene_set_gene_set_file} --map-genomes-file !{input::project_gene_map_file} class_level gene_set

#the consistent_prop makes sure that the chrom_bim_file is only expand for the chromosome with the same chrom_num prop as this gene_set_chrom
short cmd make_gene_set_chrom_initial_annot_file=$make_annot_cmd \
		--gene-set-file !{input::gene_set_gene_set_file} \
		--gene-coord-file !{input::project_gene_coord_file} \
		--windowsize !{prop::project:window_size} \
		--bimfile !{input::chrom_bim_file} \
		--annot-file !{output::gene_set_chrom_initial_annot_file} \
		class_level gene_set_chrom consistent_prop chrom_num

baseline_skip_first=1

#local cmd ln_gene_set_chrom_annot_file=ln -s !{input::gene_set_chrom_initial_annot_file} !{output::gene_set_chrom_annot_file} class_level gene_set_chrom skip_if or,chrom_baseline_annot_gz_file,chrom_baseline_bed_file

#short cmd make_gene_set_chrom_annot_file=$smart_join_cmd --exec "zcat !{input::gene_set_chrom_initial_annot_file} | awk -v OFS=\"\t\" '{print \\$0,NR}'" --exec "zcat !{input::chrom_all_genes_annot_file} | cut -f1,2,5 | sed '1 s/\S\S*$/ALL_GENES/'" --exec "zcat !{input::chrom_baseline_annot_gz_file} | cut -f1,3,$(($baseline_skip_first+5))-" --header 1 --in-delim $'\t' --col 1 --col 2 | sort -gk6 | cut -f1-5,7- | bgzip > !{output::gene_set_chrom_annot_file} class_level gene_set_chrom run_if or,chrom_baseline_annot_gz_file,chrom_baseline_bed_file


prop ld_wind_cm=scalar default 1

short cmd make_gene_set_chrom_initial_ldsc_files=$ldsc_cmd \
        --l2 \
        --bfile !{raw::chrom:*chrom_trunk} !{input:chrom_bim_file} \
        --ld-wind-cm !{prop::gene_set:ld_wind_cm} \
        --annot !{input::gene_set_chrom_initial_annot_file} \
        --out !{raw::gene_set_chrom:*gene_set_chrom_initial_trunk} !{output:gene_set_chrom_initial_l2_ldscore_gz_file} !{output:gene_set_chrom_initial_l2_m_5_50_file} \
        --print-snps !{input::chrom_snps_file} \
				--thin-annot \
				class_level gene_set_chrom consistent_prop chrom_num

#Due to storage space, we will calculate these joined files on the fly

#local cmd cp_gene_set_chrom_ldsc_files=cp !{input::gene_set_chrom_initial_l2_ldscore_gz_file} !{output::gene_set_chrom_l2_ldscore_gz_file} && cp !{input::gene_set_chrom_initial_l2_m_5_50_file} !{output::gene_set_chrom_l2_m_5_50_file} \				class_level gene_set_chrom skip_if or,chrom_baseline_annot_gz_file,chrom_baseline_bed_file consistent_prop chrom_num

#short cmd make_gene_set_chrom_ldsc_files=$smart_join_cmd --exec "zcat !{input::gene_set_chrom_initial_l2_ldscore_gz_file} | awk -v OFS=\"\t\" '{print \\$0,NR}'" --exec "zcat !{input::chrom_all_genes_l2_ldscore_gz_file} | cut -f1-3,4 | sed '1 s/\S\S*$/ALL_GENES/'" --exec "zcat !{input::chrom_baseline_l2_ldscore_gz_file} | cut -f1-3,$(($baseline_skip_first+4))-" --header 1 --in-delim $'\t' --col 1 --col 2 --col 3 | sort -gk5 | cut -f1-4,6- | bgzip > !{output::gene_set_chrom_l2_ldscore_gz_file} \
#			&& cut -f$(($baseline_skip_first+1))- !{input::chrom_baseline_l2_m_5_50_file} | paste !{input::chrom_all_genes_l2_m_5_50_file} - | paste !{input::gene_set_chrom_initial_l2_m_5_50_file} - > !{output::gene_set_chrom_l2_m_5_50_file} \
#			class_level gene_set_chrom run_if or,chrom_baseline_annot_gz_file,chrom_baseline_bed_file

baseline_ldsc_mem=4000

short cmd make_chrom_baseline_annot_gz_file=$make_annot_cmd \
		--bed-file !{input::chrom_baseline_bed_file} \
		--bimfile !{input::chrom_bim_file} \
		--annot-file !{output::chrom_baseline_annot_gz_file} \
		class_level chrom run_if chrom_baseline_bed_file skip_if chrom_baseline_annot_gz_file

short cmd make_chrom_baseline_ldsc_files=$ldsc_cmd \
        --l2 \
        --bfile !{raw::chrom:*chrom_trunk} !{input:chrom_bim_file} \
        --ld-wind-cm !{prop::chrom:ld_wind_cm} \
        --annot !{input::chrom_baseline_annot_gz_file} \
        --out !{raw::chrom:*chrom_baseline_trunk} !{output:chrom_baseline_l2_ldscore_gz_file} !{output:chrom_baseline_l2_m_5_50_file} \
        --print-snps !{input::chrom_snps_file} \
				class_level chrom run_if or,chrom_baseline_annot_gz_file,chrom_baseline_bed_file rusage_mod $baseline_ldsc_mem

#local cmd make_chrom_all_genes_gene_set_file=cut -f1 !{input::project_all_genes_gene_list_file:if_prop=project_all_genes_gene_list_file:allow_empty=1} !{input::project_gene_map_file:unless_prop=project_all_genes_gene_list_file:allow_empty=1} | cat !{input::project_gene_map_file} - | awk 'NF == 2 {m[\$2]=\$1; m[\$1]=\$1} NF == 1 && m[\$1] {print m[\$1]}' | sort -u > !{output::chrom_all_genes_gene_set_file} class_level chrom

#short cmd make_chrom_all_genes_annot_file=$make_annot_cmd \
		--gene-set-file !{input::chrom_all_genes_gene_set_file} \
		--gene-coord-file !{input::project_gene_coord_file} \
		--windowsize !{prop::project:window_size} \
		--bimfile !{input::chrom_bim_file} \
		--annot-file !{output::chrom_all_genes_annot_file} \
		class_level chrom

#short cmd make_chrom_all_genes_ldsc_files=$ldsc_cmd \
#        --l2 \
#        --bfile !{raw::chrom:*chrom_trunk} !{input:chrom_bim_file} \
#        --ld-wind-cm !{prop::chrom:ld_wind_cm} \
#        --annot !{input::chrom_all_genes_annot_file} \
#        --out !{raw::chrom:*chrom_all_genes_trunk} !{output:chrom_all_genes_l2_ldscore_gz_file} !{output:chrom_all_genes_l2_m_5_50_file} \
#        --print-snps !{input::chrom_snps_file} \
#				class_level chrom

cat_gz_files=zcat !{input::@1:sort_prop=chrom_num} | awk 'NR == 1 {print; first=\$0} NR > 1 && \$0 != first{print}' | bgzip

#local cmd make_gene_set_initial_annot_file=$cat_gz_files(gene_set_chrom_initial_annot_file) > !{output::gene_set_initial_annot_file} class_level gene_set

#short cmd make_gene_set_annot_file=$cat_gz_files(gene_set_chrom_annot_file) > !{output::gene_set_annot_file} class_level gene_set

#short cmd make_gene_set_l2_ldscore_gz_file=$cat_gz_files(gene_set_chrom_l2_ldscore_gz_file) > !{output::gene_set_l2_ldscore_gz_file} class_level gene_set

#local cmd make_gene_set_l2_5_50_file=cat !{input::gene_set_chrom_l2_m_5_50_file:sort_prop=chrom_num} | awk -F"\t" -v OFS="\t" 'NR == 1 {split("", a); for (i=1;i<=NF;i++) {a[i]=0}} {for (i=1;i<=NF;i++) {a[i]+=\$i}} END {result=""; for (i=1;i<=NF;i++) {if (result) {result=result"\t"} result = result""a[i];} print result}' > !{output::gene_set_l2_m_5_50_file} class_level gene_set

short cmd make_project_w_l2_ldscore_gz_file=$cat_gz_files(chrom_w_l2_ldscore_gz_file) > !{output::project_w_l2_ldscore_gz_file} class_level project

local cmd make_project_frq_file=(head -n1 !{input::chrom_frq_file:limit=1:sort_prop=chrom_num} && tail -qn+2 !{input::chrom_frq_file:sort_prop=chrom_num}) > !{output::project_frq_file} class_level project

prop trait_index=scalar

ldsc_trait_mem=7000

				
#short cmd make_ldsc_trait_files=$ldsc_cmd \
#				--h2 !{input;;trait_munged_sumstats_file;if_prop=trait:eq:@trait_index} \
#				--ref-ld !{raw::gene_set:*gene_set_l2_ldscore_gz_trunk} !{input:gene_set_l2_ldscore_gz_file} !{input:gene_set_l2_m_5_50_file} !{input:gene_set_annot_file} \
#				--w-ld !{raw::project:*project_w_l2_ldscore_gz_trunk} !{input:project_w_l2_ldscore_gz_file} \
#				--overlap-annot \
#				--frqfile !{raw::project:*project_frq_trunk} !{input:project_frq_file} \
#				--out !{raw::ldsc_trait:*ldsc_trait_trunk} !{output:ldsc_trait_log_file} !{output:ldsc_trait_results_file} \
#				class_level ldsc_trait consistent_prop trait_index rusage_mod $ldsc_trait_mem

short cmd make_ldsc_trait_files=result=`echo !{prop::gene_set_chrom:limit=1:sort_prop=chrom_num} | sed 's/!{prop::gene_set_chrom:chrom_num:limit=1:sort_prop=chrom_num}/@/g'` && result2=`echo !{prop::chrom:limit=1:sort_prop=chrom_num} | sed 's/!{prop::chrom:chrom_num:limit=1:sort_prop=chrom_num}/@/g'` && $ldsc_cmd \
				--h2 !{input;;trait_munged_sumstats_file;if_prop=trait:eq:@trait_index} \
				--ref-ld-chr `echo !{raw::gene_set_chrom:*gene_set_chrom_initial_trunk:limit=1:sort_prop=chrom_num} | sed "s/!{prop::gene_set_chrom:limit=1:sort_prop=chrom_num}/\$result/g"` !{input:gene_set_chrom_initial_l2_ldscore_gz_file} !{input:gene_set_chrom_initial_l2_m_5_50_file} \
				--baseline-ld-chr `echo !{raw::chrom:*chrom_baseline_trunk:limit=1:sort_prop=chrom_num} | sed "s/!{prop::chrom:limit=1:sort_prop=chrom_num}/\$result2/g"` !{input:chrom_baseline_l2_ldscore_gz_file} !{input:chrom_baseline_l2_m_5_50_file} \
				--w-ld-chr `echo !{raw::chrom:*chrom_trunk:limit=1:sort_prop=chrom_num} | sed "s/!{prop::chrom:limit=1:sort_prop=chrom_num}/\$result2/g"` !{input:chrom_w_l2_ldscore_gz_file} \
				--overlap-annot \
				--frqfile-chr `echo !{raw::chrom:*chrom_trunk:limit=1:sort_prop=chrom_num} | sed "s/!{prop::chrom:limit=1:sort_prop=chrom_num}/\$result2/g"` !{input:chrom_frq_file} \
				--out !{raw::ldsc_trait:*ldsc_trait_trunk} !{output:ldsc_trait_log_file} !{output:ldsc_trait_results_file} \
				class_level ldsc_trait consistent_prop trait_index rusage_mod $ldsc_trait_mem

short cmd make_cts_files=$ldsc_cmd \
				--h2-cts !{input::trait_munged_sumstats_file} \
				--ref-ld-chr !{prop::project:ref_ld_chr} \
				--ref-ld-chr-cts !{prop::cts:ref_ld_chr_cts} \
				--w-ld !{raw::project:*project_w_l2_ldscore_gz_trunk} !{input:project_w_l2_ldscore_gz_file} \
				--out !{raw::cts:*cts_trunk} !{output:cts_log_file} !{output:cts_results_file} \
				class_level cts run_if and,ref_ld_chr_cts,ref_ld_chr

local cmd make_cts_parsed_results_file=cat !{input::cts_results_file} | sed '1 s/^/Phenotype\t/' | sed '1! s/^/!{prop::cts:trait}\t/' > !{output::cts_parsed_results_file} class_level cts

local cmd make_project_parsed_results_file=(head -n1 !{input::cts_parsed_results_file:limit=1} && tail -qn+2 !{input::cts_parsed_results_file}) > !{output::project_parsed_results_file} class_level project

local cmd make_ldsc_trait_results_annot_file=cat !{input::ldsc_trait_results_file} | sed '1 s/^/Trait\t/' | sed '1! s/^/!{prop::trait:disp:missing_prop=trait}\t/' > !{output::ldsc_trait_results_annot_file} class_level ldsc_trait consistent_prop trait_index

local cmd make_gene_set_results_annot_file=num_genes=`cat !{input::gene_set_gene_set_file} | wc -l` && (head -n1 !{input::ldsc_trait_results_annot_file:limit=1} && tail -qn+2 !{input::ldsc_trait_results_annot_file}) | sed '1 s/^/Gene_Set\tNum_Genes\t/' | sed "1! s/^/!{prop::gene_set:disp:missing_prop=gene_set}\t\$num_genes\t/" > !{output::gene_set_results_annot_file} class_level gene_set

local cmd make_project_results_annot_file=(head -n1 !{input::gene_set_results_annot_file:limit=1} && tail -qn+2 !{input::gene_set_results_annot_file} | sort -k2) > !{output::project_results_annot_file} class_level project

#COMMANDS
#====================
